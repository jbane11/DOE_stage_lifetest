# README for angle extraction software for DOE Analyze_Image_lifetest


Example use of this software.

python angle_extraction_server.py

Then in another terminal window, run:

If you have access to the camera, you can run:
python angle_extraction_call.py --camera --save_plot

otherwise, use an existing image:
python angle_extraction_call.py --filename "test_images/image_name.png" --save_plot





This is broken down into four main scripts. 

-----------------------------------------
angle_extraction_server.py -- this is the main flask server that will handle requests from the client. It has several routes to handle different requests.

analyze_image_with_plot( filename: str, save_plot: bool) -> tuple:

    This is the main function that will be called by the flask server. It takes in a filename and a boolean to save the plot or not. It returns a tuple of the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.
    It returns a tuple of the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.


flask - route "/compute"
    This is the main route that will be called by the client. It takes in a filename and a boolean to save the plot or not. It returns a JSON object with the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.
    It calls the analyze_image_with_plot function and returns the result as a JSON object.
    Example JSON response:
    {
        'angle': 53.62, 
        'fit_quality': 0.98, 
        'success': 1, 
        'uncertainty': 0.876
    }

    If you are saving the plot, it will also return the filename of the saved plot.
    Example JSON response with plot:
    
    {
    'angle': 53.62,
    'fit_quality': 0.99, 
    'plot_saved': 'plots\\basler_capture_20251013-142459_20251015_114620_analysis.png', 
    'plot_url': '/plot/basler_capture_20251013-142459_20251015_114620_analysis.png', 
    'success': 1, 
    'uncertainty': 0.876 
    }

    For the 'success' key, a value of 1 indicates a successful fit, while 0 indicates a failure to fit the lines properly.
    For the 'fit_quality' key, it is a value between 0 and 1, with 1 being a perfect fit and 0 being a poor fit.
    For the 'uncertainty' key, it is the absolute uncertainty in degrees.  Full measurement = angle +/- uncertainty.


flask - route "/plot/<filename>"
    This route is used to serve the plot image if save_plot is True. It takes in a filename and returns the plot image as a PNG file.

flask - route "/ping"
    This route is used to check if the server is running. It returns a simple "pong" message.

flask - route "/shutdown"
    This route is used to shut down the server. It returns a simple message confirming the shutdown.
    This is still a WIP. I have seen some issues with it not shutting down properly.
    It is recommended to use Ctrl+C to stop the server for now, or something similar.


flask - route "/take_single_picture"
    This route is used to take a picture using the connected camera. It saves the image to a predefined location and returns the filename.
    This is completed via the take_picture() function in basler_capture.py
    This will connect and setup the camera for each call. Not recommended, for continues use.     This is still a WIP. 


flask - route "/remove_picture"
    This route is used to remove the file - filename
    This is still a WIP.


flask - route "/setup_camera"
    This route is used to setup the camera. It initializes the camera and prepares it for taking pictures.
    This is completed by calling the setup_camera() function in basler_capture.py
    
flask - route "/close_camera"
    This route is used to close the camera connection. It releases the camera resources.
    This is completed by calling the close_camera() function in basler_capture.py

flask - route "/capture_image"
    This route is used to take a picture using the connected camera. It saves the image to a predefined location and returns the filename.
    This is completed via the take_picture() function in basler_capture.py
    This will use the already setup camera. Make sure to run setup_camera first. 
    Recommended for continuous use.
    

-------------------------------------------


angle_extraction_call.py
    This is a simple script to call the flask server and get the angle and uncertainty. It takes in a filename and a boolean to save the plot or not. It prints out the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.
    It returns a JSON object with the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.
    Example usage:
    python angle_extraction_call.py 
        --camera --save_plot 
    or
    python angle_extraction_call.py 
        --filename "path/to/image.png" --save_plot

    If you use --camera, it will take a picture using the connected camera and analyze that image. It then will delete the taken image after analysis.
    If you use --filename, it will analyze the specified image file.
    If you use --save_plot, it will save the plot image to the server and return the filename.
    If you do not use --save_plot, it will not save the analyzed plot.
    The default for --save_plot is False.
    The default for --camera is False.

    
    {
        'angle': 53.62, 
        'fit_quality': 0.98, 
        'success': 1, 
        'uncertainty': 0.876
    }

    If you are saving the plot, it will also return the filename of the saved plot.
    Example JSON response with plot:
    
    {
    'angle': 53.62,
    'fit_quality': 0.99, 
    'plot_saved': 'plots\\basler_capture_20251013-142459_20251015_114620_analysis.png', 
    'plot_url': '/plot/basler_capture_20251013-142459_20251015_114620_analysis.png', 
    'success': 1, 
    'uncertainty': 0.876 
    }


-------------------------------------------

angle_extraction.py
    This is the main script that contains the Analyze_Image_lifetest function. It takes in a filename and a boolean to save the plot or not. It returns a tuple of the angle, absolute uncertainty, boolean of fitting success, and an assessment value of the fit.
    It also contains several helper functions to process the image, fit the data, and calculate the angle and uncertainty.
    The main function is Analyze_Image_lifetest(filename: str, save_plot: bool) -> tuple:
    Example usage:
    angle, abs_uncertainty, fit_success, fit_assessment = Analyze_Image_lifetest("path/to/image.png", True)
    
    Example output:
    Angle: 45.0 degrees
    Absolute Uncertainty: 5.0 degrees
    Fit Success: True
    Fit Assessment: 0.95



-------------------------------------------
basler_capture.py
    This script contains functions to setup, capture, and close the Basler camera using the pypylon library.
    It contains the following functions:
    - setup_camera() -> None: Initializes the camera and prepares it for taking pictures.
    - capture_image(filename: str) -> str: Takes a picture and saves it to the specified filename. Returns the filename.
    - close_camera() -> None: Closes the camera connection and releases resources.
    
    Example usage:
    setup_camera()
    filename = capture_image("path/to/save/image.png")
    close_camera()


    You may also use the take_picture(filename: str) -> str function to setup, capture, and close the camera in one call.
    Example usage:
    take_picture("path/to/save/image.png")
    This will save the image to the specified filename and return the filename.



-------------------------------------------